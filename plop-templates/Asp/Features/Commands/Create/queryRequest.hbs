using MediatR;
using {{application}}.Application.Dtos.Response;
using {{application}}.Domain.Entities;
using System.ComponentModel.DataAnnotations;
using O = {{application}}.Domain.Entities.{{folder}}ViewModel;
using Karmed.External.Auth.Library.Services;
using {{application}}.Application.Features.Commands.Base;


namespace {{application}}.Application.Features.Commands.{{folder}}.{{name}}
{
  public class {{name}}CommandRequest : BaseCommandRequest, IRequest<TransactionResultPack<{{name}}CommandResponse>>
  {

     // ðŸŽ¯ Validation Ã¶rnekleri - ihtiyaca gÃ¶re dÃ¼zenlenebilir - Validation Ã¶rnekleri - ihtiyaca gÃ¶re dÃ¼zenlenebilir
    [Required(ErrorMessage = "Name is required")]
    public string Name { get; set; }

    public string? Description { get; set; }


     public static O Map({{name}}CommandRequest request, ICurrentUserService currentUserService)
    {
      // ðŸŽ¯ Yeni otomatik auth bilgileri alma method'unu kullan - Yeni otomatik auth bilgileri alma method'unu kullan - Yeni otomatik auth bilgileri alma method'unu kullan
      var (customerId, userId, createUserId, updateUserId) = request.GetCreateAuthIds(currentUserService);

      return new()
      {
        AuthCustomerId = customerId,
        AuthUserId = userId,
        CreateUserId = createUserId, // ðŸŽ¯ Otomatik token'dan alÄ±nan CreateUserId - Otomatik token'dan alÄ±nan CreateUserId - Otomatik token'dan alÄ±nan CreateUserId
        Name = request.Name,
        Description = request.Description,
      };
    }
  }
}

