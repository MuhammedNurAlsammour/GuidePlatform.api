using MediatR;
using Microsoft.EntityFrameworkCore;
using {{application}}.Application.Abstractions.Contexts;
using {{application}}.Application.Dtos.Response;
using {{application}}.Application.Operations;
using {{application}}.Application.Abstractions.Services;
using {{application}}.Application.Dtos.ResponseDtos.{{folder}};
using {{application}}.Application.Features.Queries.Base;
using Karmed.External.Auth.Library.Services;

namespace {{application}}.Application.Features.Queries.{{folder}}.{{name}}
{
  public class {{name}}QueryHandler : BaseQueryHandler, IRequestHandler<{{name}}QueryRequest, TransactionResultPack<{{name}}QueryResponse>>
  {
    private readonly IApplicationDbContext _context;

    public {{name}}QueryHandler(
      IApplicationDbContext context,
      IAuthUserDetailService authUserService,
      ICurrentUserService currentUserService) : base(currentUserService, authUserService)
    {
      _context = context;
    }

    public async Task<TransactionResultPack<{{name}}QueryResponse>> Handle({{name}}QueryRequest request, CancellationToken cancellationToken)
    {
      try
      {
        // ðŸŽ¯ Token'dan gÃ¼venli bir ÅŸekilde Auth bilgilerini al
        var authUserId = GetSafeUserId(request.AuthUserId);
        var authCustomerId = GetSafeCustomerId(request.AuthCustomerId);

        // Base query oluÅŸtur
        var baseQuery = _context.{{tableDb}}
        .Where(x => x.RowIsActive && !x.RowIsDeleted);

        // ðŸŽ¯ Filtreleme uygula - Apply filtering
        baseQuery = Apply{{folder}}Filters(baseQuery, request);

        // ðŸŽ¯ Toplam sayÄ±yÄ± hesapla (filtreleme sonrasÄ±) - DÃ¼zeltilmiÅŸ filtreleme
        var totalCountQuery = ApplyAuthFilters(baseQuery, authUserId, authCustomerId);
        var totalCount = await totalCountQuery
            .AsNoTracking()
            .CountAsync(cancellationToken);

        // ðŸŽ¯ Verileri getir (filtreleme + sayfalama) - DÃ¼zeltilmiÅŸ filtreleme
        var filteredQuery = ApplyAuthFilters(baseQuery, authUserId, authCustomerId);
        var {{table}}s = await ApplyPagination(filteredQuery, request.GetValidatedPage(), request.GetValidatedSize())
                .AsNoTracking()
                .ToListAsync(cancellationToken);
  
        // ðŸŽ¯ TÃ¼m kullanÄ±cÄ± bilgilerini toplu olarak al (performans iÃ§in)
        var allUserIds = new List<Guid>();

        // Auth kullanÄ±cÄ± bilgileri
        var authUserIds = {{table}}s.Where(b => b.AuthUserId.HasValue).Select(b => b.AuthUserId!.Value).ToList();
        allUserIds.AddRange(authUserIds);

        // Create kullanÄ±cÄ± bilgileri
        var createUserIds = {{table}}s.Where(b => b.CreateUserId.HasValue).Select(b => b.CreateUserId!.Value).ToList();
        allUserIds.AddRange(createUserIds);

        // Update kullanÄ±cÄ± bilgileri
        var updateUserIds = {{table}}s.Where(b => b.UpdateUserId.HasValue).Select(b => b.UpdateUserId!.Value).ToList();
        allUserIds.AddRange(updateUserIds);

        // Tek seferde tÃ¼m kullanÄ±cÄ± bilgilerini al
        var allUserDetails = await _authUserService.GetAuthUserDetailsAsync(allUserIds.Distinct().ToList(), cancellationToken);

        var {{table}}Details = new List<{{folder}}DTO>();  // ðŸŽ¯ {{tableDb}}DTO listesi oluÅŸtur

        foreach (var {{table}} in {{table}}s)
        {
          // ðŸŽ¯ AuthUserService'den kullanÄ±cÄ± bilgilerini al
          string? authUserName = null;
          string? authCustomerName = null;

          if ({{table}}.AuthUserId.HasValue && allUserDetails.ContainsKey({{table}}.AuthUserId.Value))
          {
            var userDetail = allUserDetails[{{table}}.AuthUserId.Value];
            authUserName = userDetail.AuthUserName;        // AspNetUsers.UserName
            authCustomerName = userDetail.AuthCustomerName; // Customers.Name
          }

          // ðŸŽ¯ Create/Update kullanÄ±cÄ± bilgilerini al
          string? createUserName = null;
          string? updateUserName = null;

          if ({{table}}.CreateUserId.HasValue && allUserDetails.ContainsKey({{table}}.CreateUserId.Value))
          {
            var createUserDetail = allUserDetails[{{table}}.CreateUserId.Value];
            createUserName = createUserDetail.AuthUserName;
          }

          if ({{table}}.UpdateUserId.HasValue && allUserDetails.ContainsKey({{table}}.UpdateUserId.Value))
          {
            var updateUserDetail = allUserDetails[{{table}}.UpdateUserId.Value];
            updateUserName = updateUserDetail.AuthUserName;
          }

          var {{table}}Detail = new {{folder}}DTO
          {
            Id = {{table}}.Id,
            AuthUserId = {{table}}.AuthUserId,
            AuthCustomerId = {{table}}.AuthCustomerId,
            AuthUserName = authUserName,      // Service'den gelen
            AuthCustomerName = authCustomerName, // Service'den gelen
            CreateUserId = {{table}}.CreateUserId,
            CreateUserName = createUserName,
            UpdateUserId = {{table}}.UpdateUserId,
            UpdateUserName = updateUserName,
            RowCreatedDate = {{table}}.RowCreatedDate,
            RowUpdatedDate = {{table}}.RowUpdatedDate,
            RowIsActive = {{table}}.RowIsActive,
            RowIsDeleted = {{table}}.RowIsDeleted
          };

          {{table}}Details.Add({{table}}Detail);
        }

        return ResultFactory.CreateSuccessResult<{{name}}QueryResponse>(  // ðŸŽ¯ TransactionResultPack oluÅŸtur
            new {{name}}QueryResponse
            {
              TotalCount = totalCount,
              {{tableDb}} = {{table}}Details  // ðŸŽ¯ {{tableDb}}DTO listesini dÃ¶ndÃ¼r
            },
            null,
            null,
            "Ä°ÅŸlem BaÅŸarÄ±lÄ±",
            "{{tableDb}} baÅŸarÄ±yla getirildi.",
            $"{{table}}s.Count {{tableDb}} baÅŸarÄ±yla getirildi."  // ðŸŽ¯ {{tableDb}} sayÄ±sÄ±nÄ± gÃ¶ster
        );
      }
      catch (Exception ex)
      {
        return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
            null,
            null,
            "Hata / Ä°ÅŸlem BaÅŸarÄ±sÄ±z",
            "{{tableDb}} getirilirken bir hata oluÅŸtu.",
            ex.Message
        );
      }
    }

    /// <summary>
    /// KullanÄ±cÄ± {{folder}} filtrelerini uygular - Applies {{folder}} filters
    /// </summary>
    private IQueryable<{{folder}}ViewModel> Apply{{folder}}Filters(
        IQueryable<{{folder}}ViewModel> query,
        {{name}}QueryRequest request)
    {
  
  
      return query;
    }
  }
}
