using MediatR;
using Microsoft.EntityFrameworkCore;
using {{application}}.Application.Abstractions.Contexts;
using {{application}}.Application.Dtos.Response;
using {{application}}.Application.Operations;
using {{application}}.Application.Abstractions.Services;
using {{application}}.Application.Dtos.ResponseDtos.{{folder}};
using {{application}}.Application.Features.Queries.Base;
using Karmed.External.Auth.Library.Services;

namespace {{application}}.Application.Features.Queries.{{folder}}.{{name}}
{
    // Bu handler, bir {{tableDb}} ID'ye g√∂re getirir. Clean Architecture prensiplerine uygun olarak yazƒ±lmƒ±≈ütƒ±r.
    public class {{name}}QueryHandler : BaseQueryHandler, IRequestHandler<{{name}}QueryRequest, TransactionResultPack<{{name}}QueryResponse>>
    {
        private readonly IApplicationDbContext _context;

        public {{name}}QueryHandler(
            IApplicationDbContext context,
            IAuthUserDetailService authUserService,
            ICurrentUserService currentUserService) : base(currentUserService, authUserService)
        {
            _context = context;
        }

        public async Task<TransactionResultPack<{{name}}QueryResponse>> Handle({{name}}QueryRequest request, CancellationToken cancellationToken)
        {
            try
            {
                // üéØ ID doƒürulama - ID parametresi kontrol√º
                if (string.IsNullOrEmpty(request.Id))
                {
                    // Eksik parametre hatasƒ± d√∂nd√ºr√ºl√ºyor
                    return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
                        request.Id,
                        null,
                        "Hata / Eksik Parametre",
                        "{{tableDb}} ID'si belirtilmedi.",
                        "{{tableDb}} ID parametresi zorunludur. L√ºtfen 'Id' parametresini sorguya ekleyin."
                    );
                }

                var {{table}}Id = request.GetIdAsGuid();
                if (!{{table}}Id.HasValue)
                {
                    // Ge√ßersiz ID formatƒ± hatasƒ± d√∂nd√ºr√ºl√ºyor
                    return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
                        request.Id,
                        null,
                        "Hata / Ge√ßersiz ID",
                        "Ge√ßersiz {{tableDb}} ID formatƒ±.",
                        $"Ge√ßersiz {{tableDb}} ID formatƒ±: '{request.Id}'. L√ºtfen ge√ßerli bir GUID girin."
                    );
                }

                // Kullanƒ±cƒ± ve m√º≈üteri kimliklerini g√ºvenli ≈üekilde al
                var authUserId = GetSafeUserId(request.AuthUserId);
                var authCustomerId = GetSafeCustomerId(request.AuthCustomerId);

                // Temel sorgu olu≈üturuluyor
                var baseQuery = _context.{{tableDb}}
                    .Where(x => x.RowIsActive && !x.RowIsDeleted);

                // Yetkilendirme filtreleri uygulanƒ±yor ve {{tableDb}} √ßekiliyor
                var {{table}} = await ApplyAuthFilters(baseQuery, authUserId, authCustomerId)
                    .Where(x => x.Id == {{table}}Id.Value)
                    .AsNoTracking()
                    .FirstOrDefaultAsync(cancellationToken);

                if ({{table}} == null)
                {
                    // {{tableDb}} bulunamadƒ± hatasƒ± d√∂nd√ºr√ºl√ºyor
                    return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
                        request.Id,
                        null,
                        "Hata / {{tableDb}} Bulunamadƒ±",
                        "Belirtilen ID'ye sahip {{tableDb}} bulunamadƒ±.",
                        $"ID '{request.Id}' ile e≈üle≈üen {{tableDb}} bulunamadƒ±."
                    );
                }

                // Auth kullanƒ±cƒ± bilgileri √ßekiliyor
                string? authUserName = null;
                string? authCustomerName = null;

                if ({{table}}.AuthUserId.HasValue)
                {
                    var userDetail = await GetAuthUserDetailAsync({{table}}.AuthUserId.Value, cancellationToken);
                    if (userDetail != null)
                    {
                        authUserName = userDetail.AuthUserName;
                        authCustomerName = userDetail.AuthCustomerName;
                    }
                }

                // {{tableDb}} detay DTO'su olu≈üturuluyor
                var {{table}}Detail = new {{name}}DetailDto
                {
                    Id = {{table}}.Id,
                    AuthUserId = {{table}}.AuthUserId,
                    AuthCustomerId = {{table}}.AuthCustomerId,
                    AuthUserName = authUserName,      // Service'den gelen
                    AuthCustomerName = authCustomerName, // Service'den gelen
                    RowCreatedDate = {{table}}.RowCreatedDate,
                    RowUpdatedDate = {{table}}.RowUpdatedDate,
                    RowIsActive = {{table}}.RowIsActive,
                    RowIsDeleted = {{table}}.RowIsDeleted
                    // Diƒüer √∂zellikler buraya eklenebilir
                };

                // Ba≈üarƒ±lƒ± i≈ülem sonucu d√∂nd√ºr√ºl√ºyor
                return ResultFactory.CreateSuccessResult<{{name}}QueryResponse>(
                    new {{name}}QueryResponse
                    {
                        {{tableDb}} = {{table}}Detail
                    },
                    request.Id,
                    null,
                    "ƒ∞≈ülem Ba≈üarƒ±lƒ±",
                    "{{tableDb}} ba≈üarƒ±yla getirildi.",
                    $"{{tableDb}} Id: { {{{table}}}.Id } ba≈üarƒ±yla getirildi."
                );
            }
            catch (Exception ex)
            {
                // Hata durumunda hata sonucu d√∂nd√ºr√ºl√ºyor
                return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
                    request.Id,
                    null,
                    "Hata / ƒ∞≈ülem Ba≈üarƒ±sƒ±z",
                    "{{tableDb}} getirilirken bir hata olu≈ütu.",
                    ex.Message
                );
            }
        }
    }
}

