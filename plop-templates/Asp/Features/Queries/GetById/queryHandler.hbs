using MediatR;
using Microsoft.EntityFrameworkCore;
using {{application}}.Application.Abstractions.Contexts;
using {{application}}.Application.Dtos.Response;
using {{application}}.Application.Operations;
using {{application}}.Application.Abstractions.Services;
using {{application}}.Application.Dtos.ResponseDtos.{{folder}};
using {{application}}.Application.Features.Queries.Base;
using Karmed.External.Auth.Library.Services;

namespace {{application}}.Application.Features.Queries.{{folder}}.{{name}}
{
    // Bu handler, bir {{tableDb}} ID'ye gÃ¶re getirir. Clean Architecture prensiplerine uygun olarak yazÄ±lmÄ±ÅŸtÄ±r.
    public class {{name}}QueryHandler : BaseQueryHandler, IRequestHandler<{{name}}QueryRequest, TransactionResultPack<{{name}}QueryResponse>>
    {
        private readonly IApplicationDbContext _context;

        public {{name}}QueryHandler(
            IApplicationDbContext context,
            IAuthUserDetailService authUserService,
            ICurrentUserService currentUserService) : base(currentUserService, authUserService)
        {
            _context = context;
        }

        public async Task<TransactionResultPack<{{name}}QueryResponse>> Handle({{name}}QueryRequest request, CancellationToken cancellationToken)
        {
            try
            {
                // ðŸŽ¯ ID doÄŸrulama - ID parametresi kontrolÃ¼
                if (string.IsNullOrEmpty(request.Id))
                {
                    // Eksik parametre hatasÄ± dÃ¶ndÃ¼rÃ¼lÃ¼yor
                    return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
                        request.Id,
                        null,
                        "Hata / Eksik Parametre",
                        "{{tableDb}} ID'si belirtilmedi.",
                        "{{tableDb}} ID parametresi zorunludur. LÃ¼tfen 'Id' parametresini sorguya ekleyin."
                    );
                }

                var {{table}}Id = request.GetIdAsGuid();
                if (!{{table}}Id.HasValue)
                {
                    // GeÃ§ersiz ID formatÄ± hatasÄ± dÃ¶ndÃ¼rÃ¼lÃ¼yor
                    return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
                        request.Id,
                        null,
                        "Hata / GeÃ§ersiz ID",
                        "GeÃ§ersiz {{tableDb}} ID formatÄ±.",
                        $"GeÃ§ersiz {{tableDb}} ID formatÄ±: '{request.Id}'. LÃ¼tfen geÃ§erli bir GUID girin."
                    );
                }

                // KullanÄ±cÄ± ve mÃ¼ÅŸteri kimliklerini gÃ¼venli ÅŸekilde al
                var authUserId = GetSafeUserId(request.AuthUserId);
                var authCustomerId = GetSafeCustomerId(request.AuthCustomerId);

                // Temel sorgu oluÅŸturuluyor
                var baseQuery = _context.{{tableDb}}
                    .Where(x => x.RowIsActive && !x.RowIsDeleted);

                // ðŸŽ¯ Toplam sayÄ±yÄ± hesapla (filtreleme sonrasÄ±) - DÃ¼zeltilmiÅŸ filtreleme
                var totalCountQuery = ApplyAuthFilters(baseQuery, authUserId, authCustomerId);
                var totalCount = await totalCountQuery
                    .Where(x => x.Id == businessesId.Value)
                    .AsNoTracking()
                    .CountAsync(cancellationToken);

                // Yetkilendirme filtreleri uygulanÄ±yor ve {{tableDb}} Ã§ekiliyor
                var {{table}} = await ApplyAuthFilters(baseQuery, authUserId, authCustomerId)
                    .Where(x => x.Id == {{table}}Id.Value)
                    .AsNoTracking()
                    .FirstOrDefaultAsync(cancellationToken);

                if ({{table}} == null)
                {
                    // {{tableDb}} bulunamadÄ± hatasÄ± dÃ¶ndÃ¼rÃ¼lÃ¼yor
                    return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
                        request.Id,
                        null,
                        "Hata / {{tableDb}} BulunamadÄ±",
                        "Belirtilen ID'ye sahip {{tableDb}} bulunamadÄ±.",
                        $"ID '{request.Id}' ile eÅŸleÅŸen {{tableDb}} bulunamadÄ±."
                    );
                }

                // ðŸŽ¯ TÃ¼m kullanÄ±cÄ± bilgilerini toplu olarak al (performans iÃ§in)
                var allUserIds = new List<Guid>();
                
                // Auth kullanÄ±cÄ± bilgileri
                if ({{table}}.AuthUserId.HasValue)
                    allUserIds.Add({{table}}.AuthUserId.Value);
                
                // Create kullanÄ±cÄ± bilgileri
                if ({{table}}.CreateUserId.HasValue)
                    allUserIds.Add({{table}}.CreateUserId.Value);
                
                // Update kullanÄ±cÄ± bilgileri
                if ({{table}}.UpdateUserId.HasValue)
                    allUserIds.Add({{table}}.UpdateUserId.Value);
                
                // Tek seferde tÃ¼m kullanÄ±cÄ± bilgilerini al
                var allUserDetails = await _authUserService.GetAuthUserDetailsAsync(allUserIds.Distinct().ToList(), cancellationToken);

                // ðŸŽ¯ Auth kullanÄ±cÄ± bilgilerini al
                string? authUserName = null;
                string? authCustomerName = null;

                if ({{table}}.AuthUserId.HasValue && allUserDetails.ContainsKey({{table}}.AuthUserId.Value))
                {
                    var userDetail = allUserDetails[{{table}}.AuthUserId.Value];
                    authUserName = userDetail.AuthUserName;
                    authCustomerName = userDetail.AuthCustomerName;
                }

                // ðŸŽ¯ Create/Update kullanÄ±cÄ± bilgilerini al
                string? createUserName = null;
                string? updateUserName = null;

                if ({{table}}.CreateUserId.HasValue && allUserDetails.ContainsKey({{table}}.CreateUserId.Value))
                {
                    var createUserDetail = allUserDetails[{{table}}.CreateUserId.Value];
                    createUserName = createUserDetail.AuthUserName;
                }

                if ({{table}}.UpdateUserId.HasValue && allUserDetails.ContainsKey({{table}}.UpdateUserId.Value))
                {
                    var updateUserDetail = allUserDetails[{{table}}.UpdateUserId.Value];
                    updateUserName = updateUserDetail.AuthUserName;
                }

                // {{tableDb}} detay DTO'su oluÅŸturuluyor
                var {{table}}Detail = new {{tableDb}}DTO
                {
                  Id = {{table}}.Id,
                  AuthUserId = {{table}}.AuthUserId,
                  AuthCustomerId = {{table}}.AuthCustomerId,
                  AuthUserName = authUserName,      // Service'den gelen
                  AuthCustomerName = authCustomerName, // Service'den gelen
                  CreateUserName = createUserName,  // Service'den gelen
                  UpdateUserName = updateUserName,  // Service'den gelen
                  CreateUserId = {{table}}.CreateUserId,
                  UpdateUserId = {{table}}.UpdateUserId,
                  RowCreatedDate = {{table}}.RowCreatedDate,
                  RowUpdatedDate = {{table}}.RowUpdatedDate,
                  RowIsActive = {{table}}.RowIsActive,
                  RowIsDeleted = {{table}}.RowIsDeleted
                };

                // BaÅŸarÄ±lÄ± iÅŸlem sonucu dÃ¶ndÃ¼rÃ¼lÃ¼yor
                return ResultFactory.CreateSuccessResult<{{name}}QueryResponse>(
                    new {{name}}QueryResponse
                    {
                        {{tableDb}} = {{table}}Detail,
                        TotalCount = totalCount
                    },
                    request.Id,
                    null,
                    "Ä°ÅŸlem BaÅŸarÄ±lÄ±",
                    "{{tableDb}} baÅŸarÄ±yla getirildi.",
                    $"{{tableDb}} Id: { {{{table}}}.Id } baÅŸarÄ±yla getirildi."
                );
            }
            catch (Exception ex)
            {
                // Hata durumunda hata sonucu dÃ¶ndÃ¼rÃ¼lÃ¼yor
                return ResultFactory.CreateErrorResult<{{name}}QueryResponse>(
                    request.Id,
                    null,
                    "Hata / Ä°ÅŸlem BaÅŸarÄ±sÄ±z",
                    "{{tableDb}} getirilirken bir hata oluÅŸtu.",
                    ex.Message
                );
            }
        }
    }
}

